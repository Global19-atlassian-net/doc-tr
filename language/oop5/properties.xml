<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: nilgun Status: ready -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>Özellikler</title>

  <para>
   Sınıf üyesi değişkenlere <emphasis>özellik</emphasis> denir. Bunlara
   bazan <emphasis>öznitelik</emphasis> veya <emphasis>alan</emphasis>
   dendiğini de görürsünüz, fakat bu kılavuzun amaçları doğrultusunda
   biz <emphasis>özellik</emphasis> terimini kullanacağız. Bunlar normal
   değişken bildiriminin önüne <literal>public</literal>,
   <literal>protected</literal> veya <literal>private</literal> anahtar
   sözcüklerinden biri ve ardından isteğe bağlı bir tür bildirimi getirilerek
   bildirilir. Bu bildirim, bir ilklendirme olarak da yapılabilir; bu durumda
   bir sabit değerle ilklendirme yapılmalıdır. Yani, derleme sırasında
   değerlendirilebilmeli ve değerlendirilmek için çalışma anı bilgisine
   bağlı olmamalıdır.
  </para>
  <para>
   <literal>public</literal>, <literal>protected</literal>,
   ve <literal>private</literal> sözcüklerinin anlamları için
   <xref linkend="language.oop5.visibility" /> belgesine bakınız.
  </para>
  <note>
   <para>
    PHP 4 ile geriye uyumluluğu sağlamak için, PHP 5 özellik bildiriminde
    <literal>public</literal>, <literal>protected</literal>,
    veya  <literal>private</literal> yerine (veya ek olarak) hala
    <literal>var</literal> sözcüğü kabul edilmektedir. Ancak,
    <literal>var</literal> artık gerekli değildir. PHP'nin 5.0'dan 5.1.3'e
    kadar olan sürümlerinde, <literal>var</literal> kullanımı önerilmeyen
    kullanım olarak ele alınır ve bir <constant>E_STRICT</constant> uyarısı
    çıktılanırdı; PHP 5.1.3'ten beri önerilmeme durumu ortadan kalkmış olup bir
    uyarı çıktılanmamaktadır.
   </para>
   <para>
    Bir özelliği <literal>public</literal>, <literal>protected</literal>,
    veya <literal>private</literal> yerine <literal>var</literal> kullanarak
    bildirirseniz PHP 5 özelliği <literal>public</literal> olarak bildirilmiş
    gibi ele alır.
   </para>
  </note>
  <para>
   Statik olmayan özelliklere, yöntemleri içinden <literal>-&gt;</literal>
   (Nesne İşleci): <varname>$this-&gt;özellik</varname> (burada
   <literal>özellik</literal> özelliğin ismidir) kullanarak erişilir. Statik
   özelliklere ise <literal>::</literal> (Çift İki nokta imi):
   <varname>self::özellik</varname> kullanarak erişilir. Statik ve statik
   olmayan özellikler arasıdaki fark hakkında daha  ayrıntılı bilgi için
   <xref linkend="language.oop5.static" /> bölümüne bakınız.
  </para>
  <para>
   Yöntem bir nesne bağlamından çağrılıyorsa  <varname>$this</varname> sözde
   değişkeni sınıf yöntemleri içinde de kullanılabilir.
   <varname>$this</varname>, yöntemi çağıran nesneye (yöntemin ait olduğu
   nesneye) bir gönderimdir. Fakat yöntem, bir ikincil nesne bağlamından <link
   linkend="language.oop5.static">statik olarak</link> çağrılıyorsa, bu,
   birincil nesne de olabilir.
  </para>

  <para>
   <example>
    <title>- Özellik bildirimi</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // PHP 5.6.0 ve sonrasında geçerli:
   public $var1 = 'hello ' . 'world';

   // PHP 5.3.0 ve sonrasında geçerli:
   public $var2 = <<<EOD
hello world
EOD;
   // PHP 5.6.0 ve sonrasında geçerli:
   public $var3 = 1+2;

   // geçersiz özellik bildirimleri:
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // geçerli özellik bildirimleri:
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // PHP 5.3.0 ve sonrasında geçerli:
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <para>
    Sınıflar ve nesnelerle çalışan bazı işlevler vardır. Bunlar için
    <xref linkend="ref.classobj" /> bölümüne bakınız.
   </para>
  </note>

  <sect2 xml:id="language.oop5.properties.heredoc-nowdoc">
   <title>Yorumlu ve Yorumsuz Metinler</title>
   <para>
    PHP 5.3.0 ve sonrasında,
    <link linkend="language.types.string.syntax.nowdoc">Yorumsuz
    metinler</link>, <link linkend="language.types.string.syntax.heredoc">
    yorumlu metinler</link> ve özellik bildirimleri herhangi bir
    statik veri bağlamında kullanılabilir.
    <example>
     <title>- Özellik ilklendirmede yorumsuz metin kullanımı</title>
     <programlisting role="php">
<![CDATA[
<?php
class foo {
   // PHP 5.3.0'dan beri
   public $bar = <<<'EOT'
bar
EOT;
   public $baz = <<<EOT
baz
EOT;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Yorumlu ve yorumsuz metin desteği PHP 5.3.0'da eklenmiştir.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Tür Bildirimleri</title>
   <para>
    PHP 7.4.0 ve sonrasında özellik tanımı tür bildirimi içerebilmektedir.
    <example>
     <title>- Tür ile özellik bildirimi</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Tür bildirimli özellikler erişilmeden önce ilklendirilmelidir, aksi
    takdirde bir <classname>Error</classname> yavrulanır.
    <example>
      <title>- Özelliklere erişim</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
   <sect3 xml:id="language.oop5.properties.typed-properties.valid-types">
    <title>Geçerli özellik türleri</title>
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Tür</entry>
        <entry>Açıklama</entry>
        <entry>En küçük PHP sürümü</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><type>bool</type></entry>
        <entry>
         Özellik <type>bool</type> türünde olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>int</type></entry>
        <entry>
         Özellik <type>int</type> türünde olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>float</type></entry>
        <entry>
         Özellik <type>float</type> türünde olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>string</type></entry>
        <entry>
         Özellik <type>string</type> türünde olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>array</type></entry>
        <entry>
         Özellik <type>array</type> türünde olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>object</literal></entry>
        <entry>
         Özellik <type>object</type> türünde olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>iterable</literal></entry>
        <entry>
         Özellik ya <type>array</type> türünde olmalı ya da bir
         <interfacename>Traversable</interfacename> örneği olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>self</literal></entry>
        <entry>
         Özellik tanımlandığı sınıfın bir örneği olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>parent</literal></entry>
        <entry>
         Özellik tanımlandığı sınıfın ebeveyninin bir örneği olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry>Sınıf/arayüz ismi</entry>
        <entry>
         Özellik, ismi verilen sınıf veya arayüzün bir örneği olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry>?type</entry>
        <entry>
         Özellik belirtilen türde veya &null; olmalıdır.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect3>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
